"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0no-co";
exports.ids = ["vendor-chunks/@0no-co"];
exports.modules = {

/***/ "(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BREAK: () => (/* binding */ c),\n/* harmony export */   GraphQLError: () => (/* binding */ GraphQLError),\n/* harmony export */   Kind: () => (/* binding */ e),\n/* harmony export */   OperationTypeNode: () => (/* binding */ r),\n/* harmony export */   Source: () => (/* binding */ Source),\n/* harmony export */   isSelectionNode: () => (/* binding */ isSelectionNode),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseType: () => (/* binding */ parseType),\n/* harmony export */   parseValue: () => (/* binding */ parseValue),\n/* harmony export */   print: () => (/* binding */ print),\n/* harmony export */   printBlockString: () => (/* binding */ printBlockString),\n/* harmony export */   printString: () => (/* binding */ printString),\n/* harmony export */   valueFromASTUntyped: () => (/* binding */ valueFromASTUntyped),\n/* harmony export */   valueFromTypeNode: () => (/* binding */ valueFromTypeNode),\n/* harmony export */   visit: () => (/* binding */ visit)\n/* harmony export */ });\nvar e = {\n  NAME: \"Name\",\n  DOCUMENT: \"Document\",\n  OPERATION_DEFINITION: \"OperationDefinition\",\n  VARIABLE_DEFINITION: \"VariableDefinition\",\n  SELECTION_SET: \"SelectionSet\",\n  FIELD: \"Field\",\n  ARGUMENT: \"Argument\",\n  FRAGMENT_SPREAD: \"FragmentSpread\",\n  INLINE_FRAGMENT: \"InlineFragment\",\n  FRAGMENT_DEFINITION: \"FragmentDefinition\",\n  VARIABLE: \"Variable\",\n  INT: \"IntValue\",\n  FLOAT: \"FloatValue\",\n  STRING: \"StringValue\",\n  BOOLEAN: \"BooleanValue\",\n  NULL: \"NullValue\",\n  ENUM: \"EnumValue\",\n  LIST: \"ListValue\",\n  OBJECT: \"ObjectValue\",\n  OBJECT_FIELD: \"ObjectField\",\n  DIRECTIVE: \"Directive\",\n  NAMED_TYPE: \"NamedType\",\n  LIST_TYPE: \"ListType\",\n  NON_NULL_TYPE: \"NonNullType\"\n};\n\nvar r = {\n  QUERY: \"query\",\n  MUTATION: \"mutation\",\n  SUBSCRIPTION: \"subscription\"\n};\n\nclass GraphQLError extends Error {\n  constructor(e, r, n, i, t, a, l) {\n    super(e);\n    this.name = \"GraphQLError\";\n    this.message = e;\n    if (t) {\n      this.path = t;\n    }\n    if (r) {\n      this.nodes = Array.isArray(r) ? r : [ r ];\n    }\n    if (n) {\n      this.source = n;\n    }\n    if (i) {\n      this.positions = i;\n    }\n    if (a) {\n      this.originalError = a;\n    }\n    var o = l;\n    if (!o && a) {\n      var u = a.extensions;\n      if (u && \"object\" == typeof u) {\n        o = u;\n      }\n    }\n    this.extensions = o || {};\n  }\n  toJSON() {\n    return {\n      ...this,\n      message: this.message\n    };\n  }\n  toString() {\n    return this.message;\n  }\n  get [Symbol.toStringTag]() {\n    return \"GraphQLError\";\n  }\n}\n\nvar n;\n\nvar i;\n\nfunction error(e) {\n  return new GraphQLError(`Syntax Error: Unexpected token at ${i} in ${e}`);\n}\n\nfunction advance(e) {\n  e.lastIndex = i;\n  if (e.test(n)) {\n    return n.slice(i, i = e.lastIndex);\n  }\n}\n\nvar t = / +(?=[^\\s])/y;\n\nfunction blockString(e) {\n  var r = e.split(\"\\n\");\n  var n = \"\";\n  var i = 0;\n  var a = 0;\n  var l = r.length - 1;\n  for (var o = 0; o < r.length; o++) {\n    t.lastIndex = 0;\n    if (t.test(r[o])) {\n      if (o && (!i || t.lastIndex < i)) {\n        i = t.lastIndex;\n      }\n      a = a || o;\n      l = o;\n    }\n  }\n  for (var u = a; u <= l; u++) {\n    if (u !== a) {\n      n += \"\\n\";\n    }\n    n += r[u].slice(i).replace(/\\\\\"\"\"/g, '\"\"\"');\n  }\n  return n;\n}\n\nfunction ignored() {\n  for (var e = 0 | n.charCodeAt(i++); 9 === e || 10 === e || 13 === e || 32 === e || 35 === e || 44 === e || 65279 === e; e = 0 | n.charCodeAt(i++)) {\n    if (35 === e) {\n      while (10 !== (e = n.charCodeAt(i++)) && 13 !== e) {}\n    }\n  }\n  i--;\n}\n\nvar a = /[_A-Za-z]\\w*/y;\n\nvar l = new RegExp(\"(?:(null|true|false)|\\\\$(\" + a.source + ')|(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|(' + a.source + \"))\", \"y\");\n\nvar o = function(e) {\n  e[e.Const = 1] = \"Const\";\n  e[e.Var = 2] = \"Var\";\n  e[e.Int = 3] = \"Int\";\n  e[e.Float = 4] = \"Float\";\n  e[e.BlockString = 5] = \"BlockString\";\n  e[e.String = 6] = \"String\";\n  e[e.Enum = 7] = \"Enum\";\n  return e;\n}(o || {});\n\nvar u = /\\\\/;\n\nfunction value(e) {\n  var r;\n  var t;\n  l.lastIndex = i;\n  if (91 === n.charCodeAt(i)) {\n    i++;\n    ignored();\n    var d = [];\n    while (93 !== n.charCodeAt(i)) {\n      d.push(value(e));\n    }\n    i++;\n    ignored();\n    return {\n      kind: \"ListValue\",\n      values: d\n    };\n  } else if (123 === n.charCodeAt(i)) {\n    i++;\n    ignored();\n    var s = [];\n    while (125 !== n.charCodeAt(i)) {\n      if (null == (r = advance(a))) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      if (58 !== n.charCodeAt(i++)) {\n        throw error(\"ObjectField\");\n      }\n      ignored();\n      s.push({\n        kind: \"ObjectField\",\n        name: {\n          kind: \"Name\",\n          value: r\n        },\n        value: value(e)\n      });\n    }\n    i++;\n    ignored();\n    return {\n      kind: \"ObjectValue\",\n      fields: s\n    };\n  } else if (null != (t = l.exec(n))) {\n    i = l.lastIndex;\n    ignored();\n    if (null != (r = t[o.Const])) {\n      return \"null\" === r ? {\n        kind: \"NullValue\"\n      } : {\n        kind: \"BooleanValue\",\n        value: \"true\" === r\n      };\n    } else if (null != (r = t[o.Var])) {\n      if (e) {\n        throw error(\"Variable\");\n      } else {\n        return {\n          kind: \"Variable\",\n          name: {\n            kind: \"Name\",\n            value: r\n          }\n        };\n      }\n    } else if (null != (r = t[o.Int])) {\n      var v;\n      if (null != (v = t[o.Float])) {\n        return {\n          kind: \"FloatValue\",\n          value: r + v\n        };\n      } else {\n        return {\n          kind: \"IntValue\",\n          value: r\n        };\n      }\n    } else if (null != (r = t[o.BlockString])) {\n      return {\n        kind: \"StringValue\",\n        value: blockString(r.slice(3, -3)),\n        block: !0\n      };\n    } else if (null != (r = t[o.String])) {\n      return {\n        kind: \"StringValue\",\n        value: u.test(r) ? JSON.parse(r) : r.slice(1, -1),\n        block: !1\n      };\n    } else if (null != (r = t[o.Enum])) {\n      return {\n        kind: \"EnumValue\",\n        value: r\n      };\n    }\n  }\n  throw error(\"Value\");\n}\n\nfunction arguments_(e) {\n  if (40 === n.charCodeAt(i)) {\n    var r = [];\n    i++;\n    ignored();\n    var t;\n    do {\n      if (null == (t = advance(a))) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      if (58 !== n.charCodeAt(i++)) {\n        throw error(\"Argument\");\n      }\n      ignored();\n      r.push({\n        kind: \"Argument\",\n        name: {\n          kind: \"Name\",\n          value: t\n        },\n        value: value(e)\n      });\n    } while (41 !== n.charCodeAt(i));\n    i++;\n    ignored();\n    return r;\n  }\n}\n\nfunction directives(e) {\n  if (64 === n.charCodeAt(i)) {\n    var r = [];\n    var t;\n    do {\n      i++;\n      if (null == (t = advance(a))) {\n        throw error(\"Directive\");\n      }\n      ignored();\n      r.push({\n        kind: \"Directive\",\n        name: {\n          kind: \"Name\",\n          value: t\n        },\n        arguments: arguments_(e)\n      });\n    } while (64 === n.charCodeAt(i));\n    return r;\n  }\n}\n\nfunction type() {\n  var e;\n  var r = 0;\n  while (91 === n.charCodeAt(i)) {\n    r++;\n    i++;\n    ignored();\n  }\n  if (null == (e = advance(a))) {\n    throw error(\"NamedType\");\n  }\n  ignored();\n  var t = {\n    kind: \"NamedType\",\n    name: {\n      kind: \"Name\",\n      value: e\n    }\n  };\n  do {\n    if (33 === n.charCodeAt(i)) {\n      i++;\n      ignored();\n      t = {\n        kind: \"NonNullType\",\n        type: t\n      };\n    }\n    if (r) {\n      if (93 !== n.charCodeAt(i++)) {\n        throw error(\"NamedType\");\n      }\n      ignored();\n      t = {\n        kind: \"ListType\",\n        type: t\n      };\n    }\n  } while (r--);\n  return t;\n}\n\nvar d = new RegExp(\"(?:(\\\\.{3})|(\" + a.source + \"))\", \"y\");\n\nvar s = function(e) {\n  e[e.Spread = 1] = \"Spread\";\n  e[e.Name = 2] = \"Name\";\n  return e;\n}(s || {});\n\nfunction selectionSet() {\n  var e = [];\n  var r;\n  var t;\n  do {\n    d.lastIndex = i;\n    if (null != (t = d.exec(n))) {\n      i = d.lastIndex;\n      if (null != t[s.Spread]) {\n        ignored();\n        var l = advance(a);\n        if (null != l && \"on\" !== l) {\n          ignored();\n          e.push({\n            kind: \"FragmentSpread\",\n            name: {\n              kind: \"Name\",\n              value: l\n            },\n            directives: directives(!1)\n          });\n        } else {\n          ignored();\n          if (\"on\" === l) {\n            if (null == (l = advance(a))) {\n              throw error(\"NamedType\");\n            }\n            ignored();\n          }\n          var o = directives(!1);\n          if (123 !== n.charCodeAt(i++)) {\n            throw error(\"InlineFragment\");\n          }\n          ignored();\n          e.push({\n            kind: \"InlineFragment\",\n            typeCondition: l ? {\n              kind: \"NamedType\",\n              name: {\n                kind: \"Name\",\n                value: l\n              }\n            } : void 0,\n            directives: o,\n            selectionSet: selectionSet()\n          });\n        }\n      } else if (null != (r = t[s.Name])) {\n        var u = void 0;\n        ignored();\n        if (58 === n.charCodeAt(i)) {\n          i++;\n          ignored();\n          u = r;\n          if (null == (r = advance(a))) {\n            throw error(\"Field\");\n          }\n          ignored();\n        }\n        var v = arguments_(!1);\n        ignored();\n        var c = directives(!1);\n        var f = void 0;\n        if (123 === n.charCodeAt(i)) {\n          i++;\n          ignored();\n          f = selectionSet();\n        }\n        e.push({\n          kind: \"Field\",\n          alias: u ? {\n            kind: \"Name\",\n            value: u\n          } : void 0,\n          name: {\n            kind: \"Name\",\n            value: r\n          },\n          arguments: v,\n          directives: c,\n          selectionSet: f\n        });\n      }\n    } else {\n      throw error(\"SelectionSet\");\n    }\n  } while (125 !== n.charCodeAt(i));\n  i++;\n  ignored();\n  return {\n    kind: \"SelectionSet\",\n    selections: e\n  };\n}\n\nfunction fragmentDefinition() {\n  var e;\n  var r;\n  if (null == (e = advance(a))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (\"on\" !== advance(a)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  if (null == (r = advance(a))) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  var t = directives(!1);\n  if (123 !== n.charCodeAt(i++)) {\n    throw error(\"FragmentDefinition\");\n  }\n  ignored();\n  return {\n    kind: \"FragmentDefinition\",\n    name: {\n      kind: \"Name\",\n      value: e\n    },\n    typeCondition: {\n      kind: \"NamedType\",\n      name: {\n        kind: \"Name\",\n        value: r\n      }\n    },\n    directives: t,\n    selectionSet: selectionSet()\n  };\n}\n\nvar v = /(?:query|mutation|subscription|fragment)/y;\n\nfunction operationDefinition(e) {\n  var r;\n  var t;\n  var l;\n  if (e) {\n    ignored();\n    r = advance(a);\n    t = function variableDefinitions() {\n      ignored();\n      if (40 === n.charCodeAt(i)) {\n        var e = [];\n        i++;\n        ignored();\n        var r;\n        do {\n          if (36 !== n.charCodeAt(i++)) {\n            throw error(\"Variable\");\n          }\n          if (null == (r = advance(a))) {\n            throw error(\"Variable\");\n          }\n          ignored();\n          if (58 !== n.charCodeAt(i++)) {\n            throw error(\"VariableDefinition\");\n          }\n          ignored();\n          var t = type();\n          var l = void 0;\n          if (61 === n.charCodeAt(i)) {\n            i++;\n            ignored();\n            l = value(!0);\n          }\n          ignored();\n          e.push({\n            kind: \"VariableDefinition\",\n            variable: {\n              kind: \"Variable\",\n              name: {\n                kind: \"Name\",\n                value: r\n              }\n            },\n            type: t,\n            defaultValue: l,\n            directives: directives(!0)\n          });\n        } while (41 !== n.charCodeAt(i));\n        i++;\n        ignored();\n        return e;\n      }\n    }();\n    l = directives(!1);\n  }\n  if (123 === n.charCodeAt(i)) {\n    i++;\n    ignored();\n    return {\n      kind: \"OperationDefinition\",\n      operation: e || \"query\",\n      name: r ? {\n        kind: \"Name\",\n        value: r\n      } : void 0,\n      variableDefinitions: t,\n      directives: l,\n      selectionSet: selectionSet()\n    };\n  }\n}\n\nfunction parse(e, r) {\n  i = 0;\n  return function document(e, r) {\n    var n;\n    var t;\n    ignored();\n    var a = [];\n    do {\n      if (\"fragment\" === (n = advance(v))) {\n        ignored();\n        a.push(fragmentDefinition());\n      } else if (null != (t = operationDefinition(n))) {\n        a.push(t);\n      } else {\n        throw error(\"Document\");\n      }\n    } while (i < e.length);\n    if (!r) {\n      var l;\n      return {\n        kind: \"Document\",\n        definitions: a,\n        set loc(e) {\n          l = e;\n        },\n        get loc() {\n          if (!l) {\n            l = {\n              start: 0,\n              end: e.length,\n              startToken: void 0,\n              endToken: void 0,\n              source: {\n                body: e,\n                name: \"graphql.web\",\n                locationOffset: {\n                  line: 1,\n                  column: 1\n                }\n              }\n            };\n          }\n          return l;\n        }\n      };\n    }\n    return {\n      kind: \"Document\",\n      definitions: a\n    };\n  }(n = \"string\" == typeof e.body ? e.body : e, r && r.noLocation);\n}\n\nfunction parseValue(e, r) {\n  n = \"string\" == typeof e.body ? e.body : e;\n  i = 0;\n  ignored();\n  return value(!1);\n}\n\nfunction parseType(e, r) {\n  n = \"string\" == typeof e.body ? e.body : e;\n  i = 0;\n  return type();\n}\n\nvar c = {};\n\nfunction visit(e, r) {\n  var n = [];\n  var i = [];\n  try {\n    var t = function traverse(e, t, a) {\n      var l = !1;\n      var o = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;\n      var u = o && o.call(r, e, t, a, i, n);\n      if (!1 === u) {\n        return e;\n      } else if (null === u) {\n        return null;\n      } else if (u === c) {\n        throw c;\n      } else if (u && \"string\" == typeof u.kind) {\n        l = u !== e;\n        e = u;\n      }\n      if (a) {\n        n.push(a);\n      }\n      var d;\n      var s = {\n        ...e\n      };\n      for (var v in e) {\n        i.push(v);\n        var f = e[v];\n        if (Array.isArray(f)) {\n          var g = [];\n          for (var m = 0; m < f.length; m++) {\n            if (null != f[m] && \"string\" == typeof f[m].kind) {\n              n.push(e);\n              i.push(m);\n              d = traverse(f[m], m, f);\n              i.pop();\n              n.pop();\n              if (null == d) {\n                l = !0;\n              } else {\n                l = l || d !== f[m];\n                g.push(d);\n              }\n            }\n          }\n          f = g;\n        } else if (null != f && \"string\" == typeof f.kind) {\n          if (void 0 !== (d = traverse(f, v, e))) {\n            l = l || f !== d;\n            f = d;\n          }\n        }\n        i.pop();\n        if (l) {\n          s[v] = f;\n        }\n      }\n      if (a) {\n        n.pop();\n      }\n      var p = r[e.kind] && r[e.kind].leave || r.leave;\n      var h = p && p.call(r, e, t, a, i, n);\n      if (h === c) {\n        throw c;\n      } else if (void 0 !== h) {\n        return h;\n      } else if (void 0 !== u) {\n        return l ? s : u;\n      } else {\n        return l ? s : e;\n      }\n    }(e);\n    return void 0 !== t && !1 !== t ? t : e;\n  } catch (r) {\n    if (r !== c) {\n      throw r;\n    }\n    return e;\n  }\n}\n\nfunction mapJoin(e, r, n) {\n  var i = \"\";\n  for (var t = 0; t < e.length; t++) {\n    if (t) {\n      i += r;\n    }\n    i += n(e[t]);\n  }\n  return i;\n}\n\nfunction printString(e) {\n  return JSON.stringify(e);\n}\n\nfunction printBlockString(e) {\n  return '\"\"\"\\n' + e.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\n\nvar f = \"\\n\";\n\nvar g = {\n  OperationDefinition(e) {\n    var r = e.operation;\n    if (e.name) {\n      r += \" \" + e.name.value;\n    }\n    if (e.variableDefinitions && e.variableDefinitions.length) {\n      if (!e.name) {\n        r += \" \";\n      }\n      r += \"(\" + mapJoin(e.variableDefinitions, \", \", g.VariableDefinition) + \")\";\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", g.Directive);\n    }\n    return \"query\" !== r ? r + \" \" + g.SelectionSet(e.selectionSet) : g.SelectionSet(e.selectionSet);\n  },\n  VariableDefinition(e) {\n    var r = g.Variable(e.variable) + \": \" + _print(e.type);\n    if (e.defaultValue) {\n      r += \" = \" + _print(e.defaultValue);\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", g.Directive);\n    }\n    return r;\n  },\n  Field(e) {\n    var r = e.alias ? e.alias.value + \": \" + e.name.value : e.name.value;\n    if (e.arguments && e.arguments.length) {\n      var n = mapJoin(e.arguments, \", \", g.Argument);\n      if (r.length + n.length + 2 > 80) {\n        r += \"(\" + (f += \"  \") + mapJoin(e.arguments, f, g.Argument) + (f = f.slice(0, -2)) + \")\";\n      } else {\n        r += \"(\" + n + \")\";\n      }\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", g.Directive);\n    }\n    if (e.selectionSet && e.selectionSet.selections.length) {\n      r += \" \" + g.SelectionSet(e.selectionSet);\n    }\n    return r;\n  },\n  StringValue(e) {\n    if (e.block) {\n      return printBlockString(e.value).replace(/\\n/g, f);\n    } else {\n      return printString(e.value);\n    }\n  },\n  BooleanValue: e => \"\" + e.value,\n  NullValue: e => \"null\",\n  IntValue: e => e.value,\n  FloatValue: e => e.value,\n  EnumValue: e => e.value,\n  Name: e => e.value,\n  Variable: e => \"$\" + e.name.value,\n  ListValue: e => \"[\" + mapJoin(e.values, \", \", _print) + \"]\",\n  ObjectValue: e => \"{\" + mapJoin(e.fields, \", \", g.ObjectField) + \"}\",\n  ObjectField: e => e.name.value + \": \" + _print(e.value),\n  Document(e) {\n    if (!e.definitions || !e.definitions.length) {\n      return \"\";\n    }\n    return mapJoin(e.definitions, \"\\n\\n\", _print);\n  },\n  SelectionSet: e => \"{\" + (f += \"  \") + mapJoin(e.selections, f, _print) + (f = f.slice(0, -2)) + \"}\",\n  Argument: e => e.name.value + \": \" + _print(e.value),\n  FragmentSpread(e) {\n    var r = \"...\" + e.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", g.Directive);\n    }\n    return r;\n  },\n  InlineFragment(e) {\n    var r = \"...\";\n    if (e.typeCondition) {\n      r += \" on \" + e.typeCondition.name.value;\n    }\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", g.Directive);\n    }\n    return r += \" \" + g.SelectionSet(e.selectionSet);\n  },\n  FragmentDefinition(e) {\n    var r = \"fragment \" + e.name.value;\n    r += \" on \" + e.typeCondition.name.value;\n    if (e.directives && e.directives.length) {\n      r += \" \" + mapJoin(e.directives, \" \", g.Directive);\n    }\n    return r + \" \" + g.SelectionSet(e.selectionSet);\n  },\n  Directive(e) {\n    var r = \"@\" + e.name.value;\n    if (e.arguments && e.arguments.length) {\n      r += \"(\" + mapJoin(e.arguments, \", \", g.Argument) + \")\";\n    }\n    return r;\n  },\n  NamedType: e => e.name.value,\n  ListType: e => \"[\" + _print(e.type) + \"]\",\n  NonNullType: e => _print(e.type) + \"!\"\n};\n\nvar _print = e => g[e.kind](e);\n\nfunction print(e) {\n  f = \"\\n\";\n  return g[e.kind] ? g[e.kind](e) : \"\";\n}\n\nfunction valueFromASTUntyped(e, r) {\n  switch (e.kind) {\n   case \"NullValue\":\n    return null;\n\n   case \"IntValue\":\n    return parseInt(e.value, 10);\n\n   case \"FloatValue\":\n    return parseFloat(e.value);\n\n   case \"StringValue\":\n   case \"EnumValue\":\n   case \"BooleanValue\":\n    return e.value;\n\n   case \"ListValue\":\n    var n = [];\n    for (var i = 0, t = e.values.length; i < t; i++) {\n      n.push(valueFromASTUntyped(e.values[i], r));\n    }\n    return n;\n\n   case \"ObjectValue\":\n    var a = Object.create(null);\n    for (var l = 0, o = e.fields.length; l < o; l++) {\n      var u = e.fields[l];\n      a[u.name.value] = valueFromASTUntyped(u.value, r);\n    }\n    return a;\n\n   case \"Variable\":\n    return r && r[e.name.value];\n  }\n}\n\nfunction valueFromTypeNode(e, r, n) {\n  if (\"Variable\" === e.kind) {\n    return n ? valueFromTypeNode(n[e.name.value], r, n) : void 0;\n  } else if (\"NonNullType\" === r.kind) {\n    return \"NullValue\" !== e.kind ? valueFromTypeNode(e, r, n) : void 0;\n  } else if (\"NullValue\" === e.kind) {\n    return null;\n  } else if (\"ListType\" === r.kind) {\n    if (\"ListValue\" === e.kind) {\n      var i = [];\n      for (var t = 0, a = e.values.length; t < a; t++) {\n        var l = valueFromTypeNode(e.values[t], r.type, n);\n        if (void 0 === l) {\n          return;\n        } else {\n          i.push(l);\n        }\n      }\n      return i;\n    }\n  } else if (\"NamedType\" === r.kind) {\n    switch (r.name.value) {\n     case \"Int\":\n     case \"Float\":\n     case \"String\":\n     case \"Bool\":\n      return r.name.value + \"Value\" === e.kind ? valueFromASTUntyped(e, n) : void 0;\n\n     default:\n      return valueFromASTUntyped(e, n);\n    }\n  }\n}\n\nfunction isSelectionNode(e) {\n  return \"Field\" === e.kind || \"FragmentSpread\" === e.kind || \"InlineFragment\" === e.kind;\n}\n\nfunction Source(e, r, n) {\n  return {\n    body: e,\n    name: r,\n    locationOffset: n || {\n      line: 1,\n      column: 1\n    }\n  };\n}\n\n\n//# sourceMappingURL=graphql.web.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\n");

/***/ })

};
;